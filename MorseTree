package ilstu.edu;

class MorseTree {

	private Node root;

	public MorseTree() {
		root = new Node('\0');
	}

	public void add(char letter, String code) {
		add(root, letter, code);
	}

	private void add(Node current, char letter, String code) {
		if (code.isEmpty()) {
			current.letter = letter;
			return;
		}

		if (code.charAt(0) == '.') {
			if (current.left == null) {
				current.left = new Node('\0');
			}
			add(current.left, letter, code.substring(1));
		} else if (code.charAt(0) == '-') {
			if (current.right == null) {
				current.right = new Node('\0');
			}
			add(current.right, letter, code.substring(1));
		}
	}

	public char decode(String code) {
		return decode(root, code);
	}

	private char decode(Node current, String code) {
		if (current == null) {
			return '\0';
		}

		if (code.isEmpty()) {
			return current.letter;
		}

		if (code.charAt(0) == '.') {
			return decode(current.left, code.substring(1));
		} else if (code.charAt(0) == '-') {
			return decode(current.right, code.substring(1));
		}

		return '\0';
	}

	private static class Node {
		char letter;
		Node left;
		Node right;

		public Node(char letter) {
			this.letter = letter;
			left = right = null;
		}
	}
}
